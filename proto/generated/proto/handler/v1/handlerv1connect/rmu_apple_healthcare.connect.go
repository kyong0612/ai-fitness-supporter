// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/handler/v1/rmu_apple_healthcare.proto

package handlerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kyong0612/fitness-supporter/proto/generated/proto/handler/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RMUAppleHealthcareServiceName is the fully-qualified name of the RMUAppleHealthcareService
	// service.
	RMUAppleHealthcareServiceName = "proto.handler.v1.RMUAppleHealthcareService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RMUAppleHealthcareServiceRMUAppleHealthcareProcedure is the fully-qualified name of the
	// RMUAppleHealthcareService's RMUAppleHealthcare RPC.
	RMUAppleHealthcareServiceRMUAppleHealthcareProcedure = "/proto.handler.v1.RMUAppleHealthcareService/RMUAppleHealthcare"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	rMUAppleHealthcareServiceServiceDescriptor                  = v1.File_proto_handler_v1_rmu_apple_healthcare_proto.Services().ByName("RMUAppleHealthcareService")
	rMUAppleHealthcareServiceRMUAppleHealthcareMethodDescriptor = rMUAppleHealthcareServiceServiceDescriptor.Methods().ByName("RMUAppleHealthcare")
)

// RMUAppleHealthcareServiceClient is a client for the proto.handler.v1.RMUAppleHealthcareService
// service.
type RMUAppleHealthcareServiceClient interface {
	RMUAppleHealthcare(context.Context, *connect.Request[v1.RMUAppleHealthcareRequest]) (*connect.Response[v1.RMUAppleHealthcareResponse], error)
}

// NewRMUAppleHealthcareServiceClient constructs a client for the
// proto.handler.v1.RMUAppleHealthcareService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRMUAppleHealthcareServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RMUAppleHealthcareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &rMUAppleHealthcareServiceClient{
		rMUAppleHealthcare: connect.NewClient[v1.RMUAppleHealthcareRequest, v1.RMUAppleHealthcareResponse](
			httpClient,
			baseURL+RMUAppleHealthcareServiceRMUAppleHealthcareProcedure,
			connect.WithSchema(rMUAppleHealthcareServiceRMUAppleHealthcareMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// rMUAppleHealthcareServiceClient implements RMUAppleHealthcareServiceClient.
type rMUAppleHealthcareServiceClient struct {
	rMUAppleHealthcare *connect.Client[v1.RMUAppleHealthcareRequest, v1.RMUAppleHealthcareResponse]
}

// RMUAppleHealthcare calls proto.handler.v1.RMUAppleHealthcareService.RMUAppleHealthcare.
func (c *rMUAppleHealthcareServiceClient) RMUAppleHealthcare(ctx context.Context, req *connect.Request[v1.RMUAppleHealthcareRequest]) (*connect.Response[v1.RMUAppleHealthcareResponse], error) {
	return c.rMUAppleHealthcare.CallUnary(ctx, req)
}

// RMUAppleHealthcareServiceHandler is an implementation of the
// proto.handler.v1.RMUAppleHealthcareService service.
type RMUAppleHealthcareServiceHandler interface {
	RMUAppleHealthcare(context.Context, *connect.Request[v1.RMUAppleHealthcareRequest]) (*connect.Response[v1.RMUAppleHealthcareResponse], error)
}

// NewRMUAppleHealthcareServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRMUAppleHealthcareServiceHandler(svc RMUAppleHealthcareServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rMUAppleHealthcareServiceRMUAppleHealthcareHandler := connect.NewUnaryHandler(
		RMUAppleHealthcareServiceRMUAppleHealthcareProcedure,
		svc.RMUAppleHealthcare,
		connect.WithSchema(rMUAppleHealthcareServiceRMUAppleHealthcareMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.handler.v1.RMUAppleHealthcareService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RMUAppleHealthcareServiceRMUAppleHealthcareProcedure:
			rMUAppleHealthcareServiceRMUAppleHealthcareHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRMUAppleHealthcareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRMUAppleHealthcareServiceHandler struct{}

func (UnimplementedRMUAppleHealthcareServiceHandler) RMUAppleHealthcare(context.Context, *connect.Request[v1.RMUAppleHealthcareRequest]) (*connect.Response[v1.RMUAppleHealthcareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.handler.v1.RMUAppleHealthcareService.RMUAppleHealthcare is not implemented"))
}
