// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/handler/v1/analyse_image.proto

package handlerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/kyong0612/fitness-supporter/proto/generated/proto/handler/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AnalyzeImageServiceName is the fully-qualified name of the AnalyzeImageService service.
	AnalyzeImageServiceName = "proto.handler.v1.AnalyzeImageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnalyzeImageServiceAnalyzeImageProcedure is the fully-qualified name of the AnalyzeImageService's
	// AnalyzeImage RPC.
	AnalyzeImageServiceAnalyzeImageProcedure = "/proto.handler.v1.AnalyzeImageService/AnalyzeImage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	analyzeImageServiceServiceDescriptor            = v1.File_proto_handler_v1_analyse_image_proto.Services().ByName("AnalyzeImageService")
	analyzeImageServiceAnalyzeImageMethodDescriptor = analyzeImageServiceServiceDescriptor.Methods().ByName("AnalyzeImage")
)

// AnalyzeImageServiceClient is a client for the proto.handler.v1.AnalyzeImageService service.
type AnalyzeImageServiceClient interface {
	AnalyzeImage(context.Context, *connect.Request[v1.AnalyzeImageRequest]) (*connect.Response[v1.AnalyzeImageResponse], error)
}

// NewAnalyzeImageServiceClient constructs a client for the proto.handler.v1.AnalyzeImageService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnalyzeImageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnalyzeImageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &analyzeImageServiceClient{
		analyzeImage: connect.NewClient[v1.AnalyzeImageRequest, v1.AnalyzeImageResponse](
			httpClient,
			baseURL+AnalyzeImageServiceAnalyzeImageProcedure,
			connect.WithSchema(analyzeImageServiceAnalyzeImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// analyzeImageServiceClient implements AnalyzeImageServiceClient.
type analyzeImageServiceClient struct {
	analyzeImage *connect.Client[v1.AnalyzeImageRequest, v1.AnalyzeImageResponse]
}

// AnalyzeImage calls proto.handler.v1.AnalyzeImageService.AnalyzeImage.
func (c *analyzeImageServiceClient) AnalyzeImage(ctx context.Context, req *connect.Request[v1.AnalyzeImageRequest]) (*connect.Response[v1.AnalyzeImageResponse], error) {
	return c.analyzeImage.CallUnary(ctx, req)
}

// AnalyzeImageServiceHandler is an implementation of the proto.handler.v1.AnalyzeImageService
// service.
type AnalyzeImageServiceHandler interface {
	AnalyzeImage(context.Context, *connect.Request[v1.AnalyzeImageRequest]) (*connect.Response[v1.AnalyzeImageResponse], error)
}

// NewAnalyzeImageServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnalyzeImageServiceHandler(svc AnalyzeImageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	analyzeImageServiceAnalyzeImageHandler := connect.NewUnaryHandler(
		AnalyzeImageServiceAnalyzeImageProcedure,
		svc.AnalyzeImage,
		connect.WithSchema(analyzeImageServiceAnalyzeImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.handler.v1.AnalyzeImageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnalyzeImageServiceAnalyzeImageProcedure:
			analyzeImageServiceAnalyzeImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnalyzeImageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnalyzeImageServiceHandler struct{}

func (UnimplementedAnalyzeImageServiceHandler) AnalyzeImage(context.Context, *connect.Request[v1.AnalyzeImageRequest]) (*connect.Response[v1.AnalyzeImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.handler.v1.AnalyzeImageService.AnalyzeImage is not implemented"))
}
